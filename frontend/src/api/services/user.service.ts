/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { assignUserToTask } from '../fn/task/assign-user-to-task';
import { AssignUserToTask$Params } from '../fn/task/assign-user-to-task';
import { getUsersForTask } from '../fn/task/get-users-for-task';
import { GetUsersForTask$Params } from '../fn/task/get-users-for-task';
import { listUsers } from '../fn/user/list-users';
import { ListUsers$Params } from '../fn/user/list-users';
import { removeUserFromTask } from '../fn/task/remove-user-from-task';
import { RemoveUserFromTask$Params } from '../fn/task/remove-user-from-task';
import { Task } from '../models/task';
import { User } from '../models/user';

@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `listUsers()` */
  static readonly ListUsersPath = '/users';

  /**
   * Liste aller Benutzer.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  listUsers$Response(params?: ListUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<User>>> {
    return listUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * Liste aller Benutzer.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listUsers(params?: ListUsers$Params, context?: HttpContext): Observable<Array<User>> {
    return this.listUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<User>>): Array<User> => r.body)
    );
  }

  /** Path part for operation `getUsersForTask()` */
  static readonly GetUsersForTaskPath = '/tasks/{taskId}/users';

  /**
   * Liste aller Benutzer einer Aufgabe.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUsersForTask()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsersForTask$Response(params: GetUsersForTask$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<User>>> {
    return getUsersForTask(this.http, this.rootUrl, params, context);
  }

  /**
   * Liste aller Benutzer einer Aufgabe.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUsersForTask$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsersForTask(params: GetUsersForTask$Params, context?: HttpContext): Observable<Array<User>> {
    return this.getUsersForTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<User>>): Array<User> => r.body)
    );
  }

  /** Path part for operation `assignUserToTask()` */
  static readonly AssignUserToTaskPath = '/tasks/{taskId}/assign-user/{userId}';

  /**
   * Benutzer einer Aufgabe zuweisen.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignUserToTask()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignUserToTask$Response(params: AssignUserToTask$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {
    return assignUserToTask(this.http, this.rootUrl, params, context);
  }

  /**
   * Benutzer einer Aufgabe zuweisen.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignUserToTask$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignUserToTask(params: AssignUserToTask$Params, context?: HttpContext): Observable<Task> {
    return this.assignUserToTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<Task>): Task => r.body)
    );
  }

  /** Path part for operation `removeUserFromTask()` */
  static readonly RemoveUserFromTaskPath = '/tasks/{taskId}/remove-user/{userId}';

  /**
   * Benutzer von Aufgabe entfernen.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeUserFromTask()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeUserFromTask$Response(params: RemoveUserFromTask$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {
    return removeUserFromTask(this.http, this.rootUrl, params, context);
  }

  /**
   * Benutzer von Aufgabe entfernen.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeUserFromTask$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeUserFromTask(params: RemoveUserFromTask$Params, context?: HttpContext): Observable<Task> {
    return this.removeUserFromTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<Task>): Task => r.body)
    );
  }

}
