/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { assignTaskToProject } from '../fn/project/assign-task-to-project';
import { AssignTaskToProject$Params } from '../fn/project/assign-task-to-project';
import { deleteTask } from '../fn/task/delete-task';
import { DeleteTask$Params } from '../fn/task/delete-task';
import { getAllTasks } from '../fn/task/get-all-tasks';
import { GetAllTasks$Params } from '../fn/task/get-all-tasks';
import { getTaskById } from '../fn/task/get-task-by-id';
import { GetTaskById$Params } from '../fn/task/get-task-by-id';
import { getUnassignedTasks } from '../fn/task/get-unassigned-tasks';
import { GetUnassignedTasks$Params } from '../fn/task/get-unassigned-tasks';
import { Task } from '../models/task';
import { updateTask } from '../fn/task/update-task';
import { UpdateTask$Params } from '../fn/task/update-task';

@Injectable({ providedIn: 'root' })
export class TaskService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllTasks()` */
  static readonly GetAllTasksPath = '/tasks';

  /**
   * Alle Aufgaben abrufen.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTasks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTasks$Response(params?: GetAllTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Task>>> {
    return getAllTasks(this.http, this.rootUrl, params, context);
  }

  /**
   * Alle Aufgaben abrufen.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTasks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTasks(params?: GetAllTasks$Params, context?: HttpContext): Observable<Array<Task>> {
    return this.getAllTasks$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Task>>): Array<Task> => r.body)
    );
  }

  /** Path part for operation `getTaskById()` */
  static readonly GetTaskByIdPath = '/tasks/{id}';

  /**
   * Aufgabe abrufen.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTaskById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskById$Response(params: GetTaskById$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {
    return getTaskById(this.http, this.rootUrl, params, context);
  }

  /**
   * Aufgabe abrufen.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTaskById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskById(params: GetTaskById$Params, context?: HttpContext): Observable<Task> {
    return this.getTaskById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Task>): Task => r.body)
    );
  }

  /** Path part for operation `updateTask()` */
  static readonly UpdateTaskPath = '/tasks/{id}';

  /**
   * Aufgabe aktualisieren.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTask$Response(params: UpdateTask$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {
    return updateTask(this.http, this.rootUrl, params, context);
  }

  /**
   * Aufgabe aktualisieren.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTask(params: UpdateTask$Params, context?: HttpContext): Observable<Task> {
    return this.updateTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<Task>): Task => r.body)
    );
  }

  /** Path part for operation `deleteTask()` */
  static readonly DeleteTaskPath = '/tasks/{id}';

  /**
   * Aufgabe löschen.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTask()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTask$Response(params: DeleteTask$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTask(this.http, this.rootUrl, params, context);
  }

  /**
   * Aufgabe löschen.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTask$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTask(params: DeleteTask$Params, context?: HttpContext): Observable<void> {
    return this.deleteTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getUnassignedTasks()` */
  static readonly GetUnassignedTasksPath = '/tasks/unassigned';

  /**
   * Alle Aufgaben ohne Projekt abrufen.
   *
   * Liefert eine Liste aller Aufgaben, die keinem Projekt zugeordnet sind.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUnassignedTasks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnassignedTasks$Response(params?: GetUnassignedTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Task>>> {
    return getUnassignedTasks(this.http, this.rootUrl, params, context);
  }

  /**
   * Alle Aufgaben ohne Projekt abrufen.
   *
   * Liefert eine Liste aller Aufgaben, die keinem Projekt zugeordnet sind.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUnassignedTasks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnassignedTasks(params?: GetUnassignedTasks$Params, context?: HttpContext): Observable<Array<Task>> {
    return this.getUnassignedTasks$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Task>>): Array<Task> => r.body)
    );
  }

  /** Path part for operation `assignTaskToProject()` */
  static readonly AssignTaskToProjectPath = '/project/{projectId}/assign-task/{taskId}';

  /**
   * Eine Aufgabe einem Projekt zuweisen.
   *
   * Weist eine bestehende Aufgabe einem Projekt zu. Eine Aufgabe kann genau einem Projekt zugeordnet sein.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignTaskToProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignTaskToProject$Response(params: AssignTaskToProject$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {
    return assignTaskToProject(this.http, this.rootUrl, params, context);
  }

  /**
   * Eine Aufgabe einem Projekt zuweisen.
   *
   * Weist eine bestehende Aufgabe einem Projekt zu. Eine Aufgabe kann genau einem Projekt zugeordnet sein.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignTaskToProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignTaskToProject(params: AssignTaskToProject$Params, context?: HttpContext): Observable<Task> {
    return this.assignTaskToProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<Task>): Task => r.body)
    );
  }

}
